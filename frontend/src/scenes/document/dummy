import React, { useState, useEffect } from 'react';
import { 
    Paper, Table, TableBody, TableCell, 
    TableContainer, TableHead, TableRow, 
    Box, TablePagination, CircularProgress, Typography, TextField, Button
} from '@mui/material';
import { useTheme } from '@mui/material';
import { getPermit } from '../../states/api.js'; // Fetch permit data

const PermitStatusView = () => {
    const theme = useTheme();
    const [data, setData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    // Pagination states
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(20);

    // New states for filtering
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0]); // Daily filter
    const [selectedMonth, setSelectedMonth] = useState(new Date().toISOString().substring(0, 7)); // Monthly filter
    const [filterMode, setFilterMode] = useState('monthly'); // Toggle between daily or monthly filter

    useEffect(() => {
        // Fetch permit data when the component mounts
        const fetchData = async () => {
            try {
                const permitData = await getPermit();
                setData(permitData);
            } catch (error) {
                console.error('Failed to fetch permit data:', error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, []);

    const columns = [
        { id: 'ltpNo', name: 'LTP' }, 
        { id: 'shipperName', name: 'Shipper' },  
        { id: 'shipperAddress', name: 'Shipper Address' },  
        { id: 'consigneeName', name: 'Consignee' },  
        { id: 'consigneeAddress', name: 'Consignee Address' },  
        { id: 'placeOfOrigin', name: 'Origin' },  
        { id: 'portOfDestination', name: 'Destination' },  
        { id: 'transportMeans', name: 'Transport' }, 
        { id: 'dateOfDeparture', name: 'Departure' },  
        { id: 'commodity', name: 'Commodity' }, 
        { id: 'quantity', name: 'Qty' }, 
        { id: 'marketValue', name: 'Market' },  
        { id: 'or', name: 'OR' },  
        { id: 'amount', name: 'Amt' }, 
        { id: 'dateIssued', name: 'Issued' },  
        { id: 'status', name: 'Status' }, 
    ];

    // Filter data by daily or monthly selection
    const filterByDate = (data) => {
        if (filterMode === 'daily') {
            return data.filter(item => new Date(item.date).toISOString().split("T")[0] === selectedDate);
        } else if (filterMode === 'monthly') {
            return data.filter(item => new Date(item.date).toISOString().substring(0, 7) === selectedMonth);
        }
        return data;
    };

    // Slice the filtered data for pagination
    const paginatedData = filterByDate(data).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

    // Date formatting function
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}/${date.getFullYear().toString().slice(-2)}`;
    };

    // Function to get the color based on status
    const getStatusColor = (status) => {
        if (status === 'Approved') return 'green';
        if (status === 'Rejected') return 'red';
        if (status === 'Pending') return 'orange';
        return theme.palette.text.primary; // Default color for other statuses
    };

    return (
        <Box m="4rem 2rem" width="76vw">
            <Box sx={{ margin: '1%' }}>
                {/* Filter options */}
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <TextField
                        label="Filter by Date"
                        type="date"
                        value={selectedDate}
                        onChange={(e) => setSelectedDate(e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        disabled={filterMode !== 'daily'}
                    />
                    <TextField
                        label="Filter by Month"
                        type="month"
                        value={selectedMonth}
                        onChange={(e) => setSelectedMonth(e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        disabled={filterMode !== 'monthly'}
                    />
                    <Button
                        sx={{ backgroundColor: theme.palette.secondary[200] }}
                        variant="outlined"
                        onClick={() => setFilterMode(filterMode === 'daily' ? 'monthly' : 'daily')}
                    >
                        {filterMode === 'daily' ? 'Switch to Monthly' : 'Switch to Daily'}
                    </Button>
                </Box>

                {isLoading ? (
                    <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
                        <CircularProgress />
                    </Box>
                ) : paginatedData.length === 0 ? (
                    <Typography variant="h6" align="center" color="textSecondary">
                        No data available
                    </Typography>
                ) : (
                    <>
                        <TableContainer component={Paper} style={{ flexGrow: 1, maxHeight: '60vh', overflowY: 'auto' }}>
                            <Table stickyHeader>
                                <TableHead>
                                    <TableRow>
                                        {columns.map((column) => (
                                            <TableCell
                                                key={column.id}
                                                sx={{
                                                    backgroundColor: theme.palette.secondary[200],
                                                    color: 'white',
                                                    fontSize: '0.85rem', // Smaller header font size
                                                }}
                                            >
                                                {column.name}
                                            </TableCell>
                                        ))}
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {paginatedData.map((row) => (
                                        <TableRow key={row._id}>
                                            {columns.map((column) => (
                                                <TableCell key={column.id}>
                                                    {column.id === 'dateOfDeparture' || column.id === 'dateIssued'
                                                        ? formatDate(row[column.id])
                                                        : column.id === 'status'
                                                            ? <span style={{ color: getStatusColor(row[column.id]), fontWeight: 'bold' }}>
                                                                {row[column.id]}
                                                              </span>
                                                            : row[column.id]
                                                    }
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>

                        {/* Pagination */}
                        <TablePagination
                            component="div"
                            count={data.length}
                            page={page}
                            onPageChange={(event, newPage) => setPage(newPage)}
                            rowsPerPage={rowsPerPage}
                            onRowsPerPageChange={(event) => {
                                setRowsPerPage(parseInt(event.target.value, 10));
                                setPage(0);
                            }}
                            rowsPerPageOptions={[5, 10, 20]}
                        />
                    </>
                )}
            </Box>
        </Box>
    );
};

export default PermitStatusView;






import React, { useState, useEffect } from 'react';
import {
    Paper, Table, TableBody, TableCell,
    TableContainer, TableHead, TableRow,
    Box, TablePagination, CircularProgress, Typography, TextField, Button
} from '@mui/material';
import { useTheme } from '@mui/material';
import { getPermit } from '../../states/api.js'; // Fetch permit data

const PermitStatusView = () => {
    const theme = useTheme();
    const [data, setData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    // Pagination states
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(20);

    // New states for filtering
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split("T")[0]); // Daily filter
    const [selectedMonth, setSelectedMonth] = useState(new Date().toISOString().substring(0, 7)); // Monthly filter
    const [filterMode, setFilterMode] = useState('monthly'); // Toggle between daily or monthly filter

    useEffect(() => {
        // Fetch permit data when the component mounts
        const fetchData = async () => {
            try {
                const permitData = await getPermit();
                setData(permitData);
            } catch (error) {
                console.error('Failed to fetch permit data:', error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, []);

    const columns = [
        { id: 'ltpNo', name: 'LTP' },
        { id: 'shipperName', name: 'Shipper' },
        { id: 'consigneeName', name: 'Consignee' },
        { id: 'placeOfOrigin', name: 'Origin' },
        { id: 'portOfDestination', name: 'Destination' },
        { id: 'dateOfDeparture', name: 'Departure' },
        { id: 'commodity', name: 'Commodity' },
        { id: 'quantity', name: 'Qty' },
        { id: 'dateIssued', name: 'Issued' },
        { id: 'status', name: 'Status' },
    ];

    // Filter data by daily or monthly selection
    const filterByDate = (data) => {
        if (filterMode === 'daily') {
            return data.filter(item => {
                const date = item.dateIssued || item.dateOfDeparture;
                return date && new Date(date).toISOString().split("T")[0] === selectedDate;
            });
        } else if (filterMode === 'monthly') {
            return data.filter(item => {
                const date = item.dateIssued || item.dateOfDeparture;
                return date && new Date(date).toISOString().substring(0, 7) === selectedMonth;
            });
        }
        return data;
    };

    // Slice the filtered data for pagination
    const paginatedData = filterByDate(data).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);

    // Date formatting function
    const formatDate = (dateString) => {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return `${String(date.getMonth() + 1).padStart(2, '0')}/${String(date.getDate()).padStart(2, '0')}/${date.getFullYear()}`;
    };

    // Function to get the color based on status
    const getStatusColor = (status) => {
        if (status === 'Approved') return 'green';
        if (status === 'Rejected') return 'red';
        if (status === 'Pending') return 'orange';
        return theme.palette.text.primary; // Default color
    };

    // Render cell content based on column type
    const renderCellContent = (row, column) => {
        if (['dateOfDeparture', 'dateIssued'].includes(column.id)) {
            return row[column.id] ? formatDate(row[column.id]) : '-';
        } else if (column.id === 'status') {
            return (
                <span style={{ color: getStatusColor(row[column.id]), fontWeight: 'bold' }}>
                    {row[column.id]}
                </span>
            );
        }
        return row[column.id] || '-';
    };

    return (
        <Box m="4rem 2rem" width="76vw">
            <Box sx={{ margin: '1%' }}>
                {/* Filter options */}
                <Box display="flex" flexDirection={{ xs: 'column', sm: 'row' }} justifyContent="space-between" alignItems="center" mb={2}>
                    <TextField
                        label="Filter by Date"
                        type="date"
                        value={selectedDate}
                        onChange={(e) => setSelectedDate(e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        disabled={filterMode !== 'daily'}
                    />
                    <TextField
                        label="Filter by Month"
                        type="month"
                        value={selectedMonth}
                        onChange={(e) => setSelectedMonth(e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        disabled={filterMode !== 'monthly'}
                    />
                    <Button
                        sx={{ backgroundColor: theme.palette.secondary[200] }}
                        variant="outlined"
                        onClick={() => setFilterMode(filterMode === 'daily' ? 'monthly' : 'daily')}
                    >
                        {`Switch to ${filterMode === 'daily' ? 'Monthly' : 'Daily'} Filter`}
                    </Button>
                </Box>

                {isLoading ? (
                    <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
                        <CircularProgress />
                    </Box>
                ) : paginatedData.length === 0 ? (
                    <Typography variant="h6" align="center" color="textSecondary">
                        No {filterMode === 'daily' ? 'daily' : 'monthly'} data available for the selected {filterMode}.
                    </Typography>
                ) : (
                    <>
                        <TableContainer component={Paper} style={{ flexGrow: 1, maxHeight: '60vh', overflowY: 'auto' }}>
                            <Table stickyHeader>
                                <TableHead>
                                    <TableRow>
                                        {columns.map((column) => (
                                            <TableCell
                                                key={column.id}
                                                sx={{
                                                    backgroundColor: theme.palette.secondary[200],
                                                    color: 'white',
                                                    fontSize: '0.875rem',
                                                    fontWeight: 'bold',
                                                }}
                                            >
                                                {column.name}
                                            </TableCell>
                                        ))}
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {paginatedData.map((row) => (
                                        <TableRow key={row._id}>
                                            {columns.map((column) => (
                                                <TableCell
                                                    key={column.id}
                                                    sx={{ fontSize: '0.875rem', padding: '6px' }}
                                                >
                                                    {renderCellContent(row, column)}
                                                </TableCell>
                                            ))}
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>

                        {/* Pagination */}
                        <TablePagination
                            component="div"
                            count={filterByDate(data).length}
                            page={page}
                            onPageChange={(event, newPage) => setPage(newPage)}
                            rowsPerPage={rowsPerPage}
                            onRowsPerPageChange={(event) => {
                                setRowsPerPage(parseInt(event.target.value, 10));
                                setPage(0);
                            }}
                            rowsPerPageOptions={[5, 10, 20]}
                        />
                    </>
                )}
            </Box>
        </Box>
    );
};

export default PermitStatusView;





const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <>
            <TextField
                  label="LTP Number"
                  value={formValues.ltpNo}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Allow only up to 4 numeric characters
                    if (/^\d{0,4}$/.test(value)) {
                      setFormValues({ ...formValues, ltpNo: value });
                    }
                  }}
                  fullWidth
                  margin="normal"
                  inputProps={{
                    maxLength: 4, // This prevents more than 4 characters being entered
                  }}
                  placeholder="Enter 4-digit LTP number"
                />
                <TextField
                    label="Shipper Name"
                    value={formValues.shipperName}
                    onChange={(e) => setFormValues({ ...formValues, shipperName: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Shipper Address"
                    value={formValues.shipperAddress}
                    onChange={(e) => setFormValues({ ...formValues, shipperAddress: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                  label="Shipper Contact"
                  value={formValues.contactNo}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (/^\d*$/.test(value)) {
                      setFormValues({ ...formValues, contactNo: value });
                    }
                  }}
                  fullWidth
                  margin="normal"
                  inputProps={{
                    maxLength: 11,
                  }}
                  error={!!formValues.contactNo && !/^\d{10,11}$/.test(formValues.contactNo)} // Adjust range as needed
                  helperText={
                    formValues.contactNo && !/^\d{10,11}$/.test(formValues.contactNo)
                      ? "Contact number must be 11 digits."
                      : ""
                  }
                />
                <TextField
                    label="Consignee Name"
                    value={formValues.consigneeName}
                    onChange={(e) => setFormValues({ ...formValues, consigneeName: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Consignee Address"
                    value={formValues.consigneeAddress}
                    onChange={(e) => setFormValues({ ...formValues, consigneeAddress: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                  label="Consignee Contact"
                  value={formValues.consigneeContactNo}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (/^\d*$/.test(value)) {
                      setFormValues({ ...formValues, consigneeContactNo: value });
                    }
                  }}
                  fullWidth
                  margin="normal"
                  inputProps={{
                    maxLength: 11,
                  }}
                  error={!!formValues.contactNo && !/^\d{10,11}$/.test(formValues.contactNo)} // Adjust range as needed
                  helperText={
                    formValues.consigneeContactNo && !/^\d{10,11}$/.test(formValues.consigneeContactNo)
                      ? "Contact number must be 11 digits."
                      : ""
                  }
                />
                <TextField
                    label="Place Origin"
                    value={formValues.placeOfOrigin}
                    onChange={(e) => setFormValues({ ...formValues, placeOfOrigin: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Port Destination"
                    value={formValues.portOfDestination}
                    onChange={(e) => setFormValues({ ...formValues, portOfDestination: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Transport Means"
                    value={formValues.transportMeans}
                    onChange={(e) => setFormValues({ ...formValues, transportMeans: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                  label="Date of Departure"
                  type="date"
                  value={formValues.dateOfDeparture}
                  onChange={(e) => {
                    const value = e.target.value;
                    const currentDate = new Date().toISOString().split("T")[0]; // Today's date in YYYY-MM-DD
                    if (value >= currentDate) {
                      setFormValues({ ...formValues, dateOfDeparture: value });
                    }
                  }}
                  fullWidth
                  margin="normal"
                  InputLabelProps={{
                    shrink: true,
                  }}
                  error={
                    !!formValues.dateOfDeparture &&
                    formValues.dateOfDeparture < new Date().toISOString().split("T")[0]
                  }
                  helperText={
                    formValues.dateOfDeparture &&
                    formValues.dateOfDeparture < new Date().toISOString().split("T")[0]
                      ? "Date of departure cannot be in the past."
                      : ""
                  }
                />
                <TextField
                  label="Plate Number"
                  type="text"
                  value={formValues.transportId}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Allow alphanumeric characters only
                    if (/^[a-zA-Z0-9]*$/.test(value)) {
                      setFormValues({ ...formValues, transportId: value });
                    }
                  }}
                  fullWidth
                  margin="normal"
                  inputProps={{
                    maxLength: 10, // Set a reasonable maximum length
                  }}
                  placeholder="Enter Transport Id"
                />
          </>
        );
      case 2:
        return (
          <>
            <TextField
                    label="Commodity"
                    value={formValues.commodity}
                    onChange={(e) => setFormValues({ ...formValues, commodity: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Description"
                    value={formValues.description}
                    onChange={(e) => setFormValues({ ...formValues, description: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Quantity"
                    type='number'
                    value={formValues.quantity}
                    onChange={(e) => setFormValues({ ...formValues, quantity: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Market Value"
                    type='number'
                    value={formValues.marketValue}
                    onChange={(e) => setFormValues({ ...formValues, marketValue: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Remarks"
                    value={formValues.remarks}
                    onChange={(e) => setFormValues({ ...formValues, remarks: e.target.value })}
                    fullWidth
                    margin="normal"
                />
          </>
        );
      case 3:
        return (
          <>
            <TextField
                label="OR Number"
                value={formValues.or}
                type="number"
                onChange={(e) => {
                  const value = e.target.value;
                  // Allow only positive integers
                  if (/^\d*$/.test(value)) {
                    setFormValues({ ...formValues, or: value });
                  }
                }}
                fullWidth
                margin="normal"
                inputProps={{
                  min: 0, // Prevents negative numbers
                  maxLength: 10, // Optional: Adjust based on the OR number length
                }}
                placeholder="Enter OR number"
              />
                <TextField
                    label="Amount"
                    type='number'
                    value={formValues.amount}
                    onChange={(e) => setFormValues({ ...formValues, amount: e.target.value })}
                    fullWidth
                    margin="normal"
                />
                <TextField
                    label="Date Issued"
                    type="date"
                    value={formValues.dateIssued}
                    onChange={(e) =>
                      setFormValues({ ...formValues, dateIssued: e.target.value })
                    }
                    fullWidth
                    margin="normal"
                    InputLabelProps={{
                      shrink: true, // Ensures the label doesn't overlap with the date picker
                    }}
                />
          </>
        );
      case 4:
        return (
          <>
            <style>
                {`
                    @media print {
                        .no-print {
                            display: none !important;
                        }
                    }
                `}
            </style>
          <Box>
          <div className="container">
            <img src={Logo} alt="BFAR Logo" />
            <div className="content">
              <div className="title">
                <h3>Republic of the Philippines</h3>
              </div>
              <div className="title-blue">
                <div className="title">
                  <h3>Department of Agriculture</h3>
                </div>
                <div className="title1">
                  <h2>BUREAU OF FISHERIES AND AQUATIC RESOURCES - MIMAROPA</h2>
                </div>
              </div>
              <div className="title">
                <h1>FISHERIES INSPECTION AND QUARANTINE SERVICES</h1>
              </div>
              <div className="title">
                <h3>
                  Le Grace Building, Roxas Drive, Brgy Guinobatan, Calapan City,
                  Oriental Mindoro
                  <br />
                  Telephone number: (043) 288-2022 / Email address:
                  fiqsmimaropa@gmail.com
                </h3>
              </div>
            </div>
    
            <div className="main-content">
              <div className="ltp-permit">
                <h1>LOCAL TRANSPORT PERMIT</h1>
              </div>
              <div className="date-no">
                <ol className="ltp-date">
                <div>
                  <span>Date:</span>
                  <l>{new Date(formValues.dateIssued).toLocaleDateString('en-GB')}</l>
                </div>
                </ol>
                <ol className="ltp-no">
                  <p className="ltp-no">
                    LTP No.: LTP-41-MADSI-24-
                    <l>{formValues.ltpNo}</l>
                  </p>
                </ol>
              </div>
    
              <div>
                <p>
                  Pursuant to the provisions of <i>
                    <b>Philippine Fisheries Code of 1998</b>
                  </i>{" "}
                  (RA No. 8550, as amended by RA No. 10654, An Act to prevent, Deter
                  and Eliminate IUU Fishing), <i>
                    <b>Food Safety Act of 2013</b>
                  </i>{" "}
                  (RA No. 10611) <i>
                    <b>Wildlife Resources Conservation and Protection Act</b>
                  </i>{" "}
                  (RA No. 9147), its Implementing Rules and Regulations, and Fisheries
                  Administrative Order No. 233, Series of 2010, the Aquatic Wildlife /
                  Fish and Fishery/ Aquatic Products herein listed are authorized for
                  domestic movement:
                </p>
              </div>
    
              <div>
                <table className='el'>
                  <thead>
                    <tr>
                      <th colSpan="5">A. TRANSPORT DETAILS</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>
                        <ol start={1}>
                          <li start>Shipper's Name</li>
                        </ol>
                      </td>
                      <td>
                        <l>{formValues.shipperName}</l>
                      </td>
                      <td >
                        <ol start={3}>
                          <li>Consignee's Name</li>
                        </ol>
                      </td>
                      <td colSpan="2">
                        <l>{formValues.consigneeName}</l>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <ol>
                          <li>Shipper's Address</li>
                        </ol>
                      </td>
                      <td>
                        address: <l>{formValues.shipperAddress}</l><br />
                        contact number: <l>{formValues.contactNo}</l>
                      </td>
                      <td>
                        <ol start="3">
                          <li>Consignee's Address</li>
                        </ol>
                      </td>
                      <td colSpan="2">
                      address: <l>{formValues.consigneeAddress}</l><br />
                      contact number: <ol>{formValues.consigneeContactNo}</ol>
                      </td>
                    </tr>
                    <tr>
                    <td colSpan="">
                            <ol start="5">
                                <li>Place of Origin</li>
                            </ol>
                            </td>
                            <td colSpan="">
                            <l>{formValues.placeOfOrigin}</l>
                            </td>
                            <td >
                            <ol start="6">
                                <li>Port of Destination</li>
                            </ol>
                            </td>
                            <td colSpan="2">
                            <ol>{formValues.portOfDestination}</ol>
                            </td>
                        </tr> 
                        <tr>
                            <td colSpan="">
                            <ol>
                                <li>Transport Means</li>
                            </ol>
                            </td>
                            <td colSpan="">
                            <ol>{formValues.transportMeans}</ol>
                            </td>
                            <td >
                            <ol start="8">
                                <li>Date of Departure</li>
                            </ol>
                            </td>
                            <td colSpan="2">
                            Date: <l>{new Date(formValues.dateOfDeparture).toLocaleDateString('en-GB')}</l> 
                            </td>
                        </tr>
                        <tr>
                            <td colSpan="">
                            <ol start="9">
                                <li>Transport ID</li>
                            </ol>
                            </td>
                            <td colSpan="4">
                            Plate No.: <l>{formValues.transportId}</l>
                            <select name="vessel"style={{ marginLeft: 20}}> {/*onChange={handleChange}*/}
                                <option value="Montenegro">Montenegro</option>
                                <option value="Starhorse">Starhorse</option>
                            </select>
                            <select name="vesselName" style={{ marginLeft: 20}}> {/*onChange={handleChange}*/}
                                <option value="1">M/V Maria Diana</option>
                                <option value="2">M/V Reina Divinagracia</option>
                            </select>
                            </td>
                        </tr>
                        <tr>
                        <th colSpan="5"><b>B. PRODUCT DETAILS <i>(Use Separate sheets if necessary)</i></b></th>
                        </tr>
                        <tr className="tableA">
                            <td>
                            <ol start="10">
                                <li>Commodity <i>(Common name and Scientific name)</i></li>
                                <ol>{formValues.commodity}</ol>
                            </ol>
                            </td>
                            <td>
                            <ol start="11">
                                <li>Description <i>(Including parts, marks, derrivatives, number, if any)</i></li>
                                <ol>{formValues.description}</ol>
                            </ol>
                            </td>
                            <td>
                            <ol start="12">
                                <li>Quantity <i>(Kgs./Ton.)</i></li>
                                <ol>{formValues.quantity}</ol>
                            </ol>
                            </td>
                            <td >
                            <ol start="13">
                                <li>Market Value <i>(Est.)</i></li>
                                <ol>{formValues.marketValue}</ol>
                            </ol>
                            </td>
                            <td>
                            <ol start="14">
                                <li>Remarks <i>(No. of tubs, boxes, pcs. purpose.etc.)</i></li>
                                <ol>{formValues.remarks}</ol>
                            </ol>
                            </td>
                        </tr>  
                        <tr>
                        <td colSpan="5">.</td>
                    </tr> 
                    <tr>
                        <th colSpan="5">C. TRACEABILITY <i>(Check the appropriate box indicate the corresponding code)</i></th>
                    </tr>
                    <tr className="checkbox">
                        <td colSpan="3"><input type="checkbox"/>Aquatic Wildlife Collector's permit (AWCP) <br/>
                            <input type="checkbox"/>Aquatic Wildlife Farm Permit (AWFP) <br/>
                            <input type="checkbox"/>Aquatic Wildlife Special Use Permit (AWSUP) <br/>
                            <input type="checkbox"/>Certificate of Aquatic Wildlife Registration <br/>
                            <input type="checkbox"/>Certificate of Compliance <i>(Processing Establishment)</i> <br/>
                            <input type="checkbox"/> Farm Registration/Inventory
                        </td>
                        <td colSpan="3">
                            <input type="checkbox"/>Health Certificate <br/>
                            <input type="checkbox"/>CFVGL/BoatR  <br/>
                            <input type="checkbox"/>Auxiliary Invoice  <br/>
                            <input type="checkbox"/>SPS Import Clearance <br/>
                            <input type="checkbox"/>Other's <i>(please specify)</i> from LGU - 
                            <select name="LGU" id="LGU-mduque">
                                <option value="#">Gasan, Marinduque</option>
                                <option value="#">Boac, Marinduque</option>
                                <option value="#">Mogpog, Marinduque</option>
                                <option value="#">Torrijos, Marinduque</option>
                                <option value="#">Gasan, Marinduque</option>
                                <option value="#">Boac, Marinduque</option>
                            </select>
                        </td>
                    </tr> 
                    <tr className='dry-seal'>
                        <ol className="dry-seal">
                            <img src={Img} alt="BFAR Logo" />
                        </ol>
                            <td className='fees'>
                            <i>Fees collected: <ol>{formValues.amount}</ol></i> <br/><br/> 
                            <i>Official Receipt No.: <ol>{formValues.or}</ol></i> <br/><br/>
                            <i>O.R Date: <ol>{new Date(formValues.dateIssued).toLocaleDateString('en-GB')}</ol></i>
                            </td>
                            <ol className="quar">
                            <i>Issued by:</i><br/><br/><br/><br/>
                            <ol className="quar1">
                                <h3>FERDINAND L. DE GALICIA</h3>
                                <p>FRO-I/Fisheries Inspection & Quarantine Officer <br/>
                                Balanacan Port, Mogpog, Marinduque - - CP#09773375767/ 09087332916</p>
                                <p>Name of Approving Officer</p>
                            </ol>
                            <i>Ispected by:</i><br/><br/><br/><br/>
                            <l className="quar2">
                                <h3>FERDINAND L. DE GALICIA</h3>
                                <p>FRO-I/Fisheries Inspection & Quarantine Officer <br/>
                                    Balanacan Port, Mogpog, Marinduque - - CP#09773375767/ 09087332916</p>
                                <p>Name of Fisheries Inspection</p>
                            </l>
                        </ol>
                        </tr>                     
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </Box>
        </>
        );
      default:
        return null;
    }
  };