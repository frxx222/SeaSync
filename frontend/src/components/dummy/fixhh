// import React, { useState, useEffect } from "react";
// import {
//     BarChart,
//     Bar,
//     XAxis,
//     YAxis,
//     CartesianGrid,
//     Tooltip,
//     ResponsiveContainer,
//     Legend,
//     LineChart,
//     Line
// } from "recharts";
// import {
//     Box,
//     Card,
//     CardContent,
//     FormControl,
//     MenuItem,
//     Select,
//     Typography,
//     Grid,
//     IconButton,
//     TextField,
//     InputLabel,
//     Skeleton,
//     Alert,
//     Stack
// } from '@mui/material';
// import { Download, RefreshCw, Table, BarChart as BarChartIcon } from "lucide-react";

// const sourceColors = {
//     "Boac": "#003F5E",
//     "Mogpog": "#FFA600",
//     "Gasan": "#FF6361",
//     "Buenavista": "#A8CD89",
//     "Torrijos": "#22177A",
//     "Sta Cruz": "#C2FFC7",
// };

// const FishChart = () => {
//     const [data, setData] = useState([]);
//     const [view, setView] = useState("monthly");
//     const [selectedFish, setSelectedFish] = useState(null);
//     const [historicalData, setHistoricalData] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);
//     const [chartType, setChartType] = useState("bar");
//     const [dateRange, setDateRange] = useState({
//         start: new Date().getFullYear() + "-01-01",
//         end: new Date().getFullYear() + "-12-31"
//     });

//     const getCurrentDateInfo = () => ({
//         month: new Date().getMonth() + 1,
//         year: new Date().getFullYear(),
//     });

//     // Add new state for tracking last data update
//     const [lastUpdate, setLastUpdate] = useState({
//         timestamp: new Date(),
//         view: 'daily'
//     });

//     // Function to check if reset is needed
//     const checkResetNeeded = () => {
//         const currentDate = new Date();
//         const lastUpdateDate = new Date(lastUpdate.timestamp);

//         if (view === 'daily') {
//             // Reset needed if last update was on a different day
//             return lastUpdateDate.getDate() !== currentDate.getDate() ||
//                    lastUpdateDate.getMonth() !== currentDate.getMonth() ||
//                    lastUpdateDate.getFullYear() !== currentDate.getFullYear();
//         } else if (view === 'monthly') {
//             // Reset needed if last update was in a different month
//             return lastUpdateDate.getMonth() !== currentDate.getMonth() ||
//                    lastUpdateDate.getFullYear() !== currentDate.getFullYear();
//         }
//         return false;
//     };

//     // Function to perform automatic reset
//     const performAutoReset = async () => {
//         try {
//             // Reset the data on the backend
//             const resetResponse = await fetch(`${import.meta.env.VITE_BASE_URL}/api/supply/auto-reset`, {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify({
//                     view,
//                     lastUpdate: lastUpdate.timestamp,
//                     currentTime: new Date()
//                 })
//             });

//             if (!resetResponse.ok) {
//                 throw new Error('Failed to reset data');
//             }

//             // Fetch fresh data after reset
//             await fetchData();
            
//             // Update last update timestamp
//             setLastUpdate({
//                 timestamp: new Date(),
//                 view
//             });

//             // Store last update in localStorage for persistence
//             localStorage.setItem('fishChartLastUpdate', JSON.stringify({
//                 timestamp: new Date(),
//                 view
//             }));

//         } catch (error) {
//             console.error('Auto-reset failed:', error);
//             setError('Failed to perform automatic data reset');
//         }
//     };

//     // Initialize last update from localStorage
//     useEffect(() => {
//         const storedLastUpdate = localStorage.getItem('fishChartLastUpdate');
//         if (storedLastUpdate) {
//             setLastUpdate(JSON.parse(storedLastUpdate));
//         }
//     }, []);

//     // Setup automatic reset check
//     useEffect(() => {
//         // Check for reset need on component mount and view change
//         if (checkResetNeeded()) {
//             performAutoReset();
//         }

//         // Set up interval to check for reset need
//         const resetCheckInterval = setInterval(() => {
//             if (checkResetNeeded()) {
//                 performAutoReset();
//             }
//         }, 60000); // Check every minute

//         // Cleanup interval on unmount
//         return () => clearInterval(resetCheckInterval);
//     }, [view, lastUpdate]);

//     // Modified fetchData function to update lastUpdate
//     const fetchData = async () => {
//         setLoading(true);
//         setError(null);
//         const { month, year } = getCurrentDateInfo();
//         try {
//             const response = await fetch(
//                 `${import.meta.env.VITE_BASE_URL}/api/supply/fish?month=${month}&year=${year}`
//             );
//             if (!response.ok) throw new Error('Failed to fetch data');
//             const result = await response.json();
//             setData(result);
            
//             // Update last update timestamp after successful fetch
//             setLastUpdate({
//                 timestamp: new Date(),
//                 view
//             });
//             localStorage.setItem('fishChartLastUpdate', JSON.stringify({
//                 timestamp: new Date(),
//                 view
//             }));

//         } catch (error) {
//             setError(error.message);
//             console.error("Error fetching data:", error);
//         } finally {
//             setLoading(false);
//         }
//     };

//     const fetchHistoricalData = async (fishType) => {
//         setLoading(true);
//         try {
//             const response = await fetch(
//                 `${import.meta.env.VITE_BASE_URL}/api/supply/fish-history?fishType=${fishType}&start=${dateRange.start}&end=${dateRange.end}`
//             );
//             if (!response.ok) throw new Error('Failed to fetch historical data');
//             const result = await response.json();
//             setHistoricalData(result);
//         } catch (error) {
//             setError(error.message);
//             console.error("Error fetching historical data:", error);
//         } finally {
//             setLoading(false);
//         }
//     };

//     useEffect(() => {
//         fetchData();
//     }, [view]);

//     const handleFishClick = (fishType) => {
//         setSelectedFish(fishType);
//         fetchHistoricalData(fishType);
//     };

//     const handleRefresh = () => {
//         fetchData();
//         if (selectedFish) {
//             fetchHistoricalData(selectedFish);
//         }
//     };

//     const handleDownload = () => {
//         const csvData = data.map(row => 
//             `${row.fishType},${row.source},${row.supply}`
//         ).join('\n');
        
//         const blob = new Blob([`Fish Type,Source,Supply\n${csvData}`], { type: 'text/csv' });
//         const url = window.URL.createObjectURL(blob);
//         const a = document.createElement('a');
//         a.href = url;
//         a.download = `fish-supply-${view}-${new Date().toISOString().split('T')[0]}.csv`;
//         document.body.appendChild(a);
//         a.click();
//         document.body.removeChild(a);
//         window.URL.revokeObjectURL(url);
//     };

//     const groupedData = data.reduce((acc, item) => {
//         const { fishType, source, supply } = item;
//         if (!acc[fishType]) acc[fishType] = {};
//         acc[fishType][source] = supply;
//         return acc;
//     }, {});

//     const chartData = Object.entries(groupedData).map(([fishType, sources]) => ({
//         fishType,
//         ...sources,
//     }));

//     const monthLabels = [
//         "Jan", "Feb", "Mar", "Apr", "May", "Jun",
//         "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
//     ];
    
//     const processedHistoricalData = historicalData.map((item) => ({
//         date: monthLabels[item.month - 1],
//         ...item,
//     }));

//     // Add last update display to the UI
//     const renderLastUpdateInfo = () => {
//         const lastUpdateDate = new Date(lastUpdate.timestamp);
//         const formattedDate = lastUpdateDate.toLocaleDateString();
//         const formattedTime = lastUpdateDate.toLocaleTimeString();

//         return (
//             <Typography variant="body2" color="text.secondary">
//                 Last updated: {formattedDate} {formattedTime}
//                 {checkResetNeeded() && " (Reset pending...)"}
//             </Typography>
//         );
//     };

//     const renderChart = (data, type) => {
//         if (type === "bar") {
//             return (
//                 <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
//                 onClick={(e) => e && handleFishClick(e.activeLabel)}
//                 >
//                     <CartesianGrid strokeDasharray="3 3" />
//                     <XAxis dataKey={data === chartData ? "fishType" : "date"} />
//                     <YAxis />
//                     <Tooltip />
//                     {Object.keys(sourceColors).map((source) => (
//                         <Bar key={source} dataKey={source} fill={sourceColors[source]} stackId="sources" />
//                     ))}
//                     <Legend />
//                 </BarChart>
//             );
//         } else {
//             return (
//                 <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>
//                     <CartesianGrid strokeDasharray="3 3" />
//                     <XAxis dataKey={data === chartData ? "fishType" : "date"} />
//                     <YAxis />
//                     <Tooltip />
//                     {Object.keys(sourceColors).map((source) => (
//                         <Line 
//                             key={source} 
//                             type="monotone" 
//                             dataKey={source} 
//                             stroke={sourceColors[source]} 
//                             strokeWidth={2}
//                         />
//                     ))}
//                     <Legend />
//                 </LineChart>
//             );
//         }
//     };

//     // Modify the return JSX to include last update info
//     return (
//         <Box sx={{ p: 3 }}>
//             <Stack spacing={3}>
//                 {error && (
//                     <Alert severity="error" sx={{ mb: 2 }}>
//                         {error}
//                     </Alert>
//                 )}

//                 <Card>
//                     <CardContent>
//                         <Grid container spacing={2} alignItems="center" sx={{ mb: 2 }}>
//                             <Grid item xs={12} md={6}>
//                                 <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
//                                     Fish Supply Dashboard
//                                 </Typography>
//                                 {renderLastUpdateInfo()}
//                             </Grid>
//                             <Grid item xs={12} md={6}>
//                                 <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
//                                     <FormControl size="small">
//                                         <InputLabel>View</InputLabel>
//                                         <Select
//                                             value={view}
//                                             onChange={(e) => setView(e.target.value)}
//                                             label="View"
//                                         >
//                                             <MenuItem value="monthly">Monthly</MenuItem>
//                                             <MenuItem value="daily">Daily</MenuItem>
//                                         </Select>
//                                     </FormControl>
//                                     <IconButton onClick={() => setChartType(prev => prev === "bar" ? "line" : "bar")}>
//                                         {chartType === "bar" ? <Table /> : <BarChartIcon />}
//                                     </IconButton>
//                                     <IconButton onClick={handleRefresh}>
//                                         <RefreshCw />
//                                     </IconButton>
//                                     <IconButton onClick={handleDownload}>
//                                         <Download />
//                                     </IconButton>
//                                 </Box>
//                             </Grid>
//                         </Grid>

//                         {loading ? (
//                             <Skeleton variant="rectangular" height={400} />
//                         ) : (
//                             <Box sx={{ height: 400 }}>
//                                 <ResponsiveContainer>
//                                     {renderChart(chartData, chartType)}
//                                 </ResponsiveContainer>
//                             </Box>
//                         )}
//                         </CardContent>
//                 </Card>

//                 {selectedFish && (
//                     <Card>
//                         <CardContent>
//                             <Grid container spacing={2} alignItems="center" sx={{ mb: 2 }}>
//                                 <Grid item xs={12} md={6}>
//                                     <Typography variant="h6">
//                                         Historical Data for {selectedFish}
//                                     </Typography>
//                                 </Grid>
//                                 <Grid item xs={12} md={6}>
//                                     <Box sx={{ display: 'flex', gap: 2 }}>
//                                         <TextField
//                                             type="date"
//                                             label="Start Date"
//                                             value={dateRange.start}
//                                             onChange={(e) => setDateRange(prev => ({
//                                                 ...prev,
//                                                 start: e.target.value
//                                             }))}
//                                             size="small"
//                                             InputLabelProps={{ shrink: true }}
//                                         />
//                                         <TextField
//                                             type="date"
//                                             label="End Date"
//                                             value={dateRange.end}
//                                             onChange={(e) => setDateRange(prev => ({
//                                                 ...prev,
//                                                 end: e.target.value
//                                             }))}
//                                             size="small"
//                                             InputLabelProps={{ shrink: true }}
//                                         />
//                                     </Box>
//                                 </Grid>
//                             </Grid>

//                             {loading ? (
//                                 <Skeleton variant="rectangular" height={300} />
//                             ) : (
//                                 <Box sx={{ height: 300 }}>
//                                     <ResponsiveContainer>
//                                         {renderChart(processedHistoricalData, chartType)}
//                                     </ResponsiveContainer>
//                                 </Box>
//                             )}
//                         </CardContent>
//                         </Grid>
//                     </CardContent>
//                 </Card>
//             </Stack>
//         </Box>
//     );
// };

// export default FishChart;